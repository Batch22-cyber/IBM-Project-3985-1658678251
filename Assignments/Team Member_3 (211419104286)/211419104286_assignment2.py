# -*- coding: utf-8 -*-
"""211419104286_Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kEzRUGjJ4v_rwP-rhD9JKr20Q5WBD26K
"""

import numpy as np

import pandas as pd

"""#2.Loading the csv file


> Indented block


"""

d = pd.read_csv("Churn_Modelling.csv")

d

d.columns

d.describe()

d['Age'].head()

"""#Performing descriptive statistics on the dataset."""

d.Gender.value_counts()

d.Geography.value_counts()

"""#Handle the Missing values."""

d.isna().any()

rows,columns=np.where(d.isnull())
d.loc[rows]
d.loc[columns]

#The above code is for returning the null cells of the dataset.
#as there is no missing values, it returned nothing

"""#Find the outliers and replace the outliers"""

import matplotlib.pyplot as plt

import seaborn as sns

#Visualizations

sns.boxplot(d['Balance'],data=d)

d['Balance'].hist()

"""# 7. Check for Categorical columns and perform encoding."""

geo_data = pd.get_dummies(d["Geography"],drop_first=False)
gender_data = pd.get_dummies(d["Gender"],drop_first=False)

geo_data

#One Hot Encoding

geo_data.tail()

#Label Encoding

from sklearn.preprocessing import LabelEncoder

from collections import Counter as count

l = LabelEncoder()

d['Balance'] = l.fit_transform(d['Balance'])

d['Balance'].head()

"""Split the data into dependent and independent variables.

"""

df=pd.concat([d,geo_data,gender_data],axis=1)
df.head()

df.columns

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

plt.figure(figsize=(8,8))
sns.countplot(x='Exited', data=df)
plt.xlabel(" 0 - Still with bank :: 1 - Exited From Bank")
plt.ylabel(" Count")
plt.title("Visual")
plt.show()

d.drop(['RowNumber','CustomerId','Surname'],axis =1,inplace = True)

# x - Independent
# y - Dependent
x = d.drop('Exited',axis=1)
y=d['Exited']

y.head()

"""#Scale the independent variables"""

x.head()

"""#Split the data into training and testing"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2,random_state=0)

print('X Train shape : {}, Y Train shape: {}'.format(x_train.shape,y_train.shape))

print('X Test shape : {} , Y Test shape: {}'.format(x_test.shape,y_test.shape))

x_train

x_test